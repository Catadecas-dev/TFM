name: CD Pipeline

# This workflow deploys to both AWS EKS and Azure AKS
# Required secrets:
# - DOCKERHUB_USERNAME: Your Docker Hub username
# - DOCKERHUB_TOKEN: Your Docker Hub access token
# - AWS_ACCESS_KEY_ID: AWS access key with EKS permissions
# - AWS_SECRET_ACCESS_KEY: AWS secret access key
# - AZURE_CREDENTIALS: JSON output from az ad sp create-for-rbac

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [main]
    types: [completed]
  # Allow manual triggers
  workflow_dispatch:

jobs:
  build-push:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push multi-architecture image
      uses: docker/build-push-action@v4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: jdecas/myapp:latest

  deploy-aws:
    needs: build-push
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name my-eks-cluster --region us-east-1
    
    - name: Deploy to AWS EKS
      run: |
        kubectl apply -f kubernetes/deployment.yaml
        kubectl apply -f kubernetes/service.yaml
      
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/my-app-deployment
        echo "Application deployed to AWS EKS: $(kubectl get service my-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')"

  deploy-azure:
    needs: build-push
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: aks-resource-group
        cluster-name: my-aks-cluster
    
    - name: Deploy to Azure AKS
      run: |
        kubectl apply -f kubernetes/deployment.yaml
        kubectl apply -f kubernetes/service.yaml
      
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/my-app-deployment
        echo "Application deployed to Azure AKS: $(kubectl get service my-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
