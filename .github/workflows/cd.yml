name: Deploy Ghost Multi-Cloud

on:
  workflow_dispatch:

jobs:
  deploy-to-aws-eks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name my-eks-cluster --region us-east-1

      - name: Prepare Kubernetes Secret
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          sed -i "s|__DB_HOST__|$(echo -n "$DB_HOST" | base64)|g" kubernetes/secrets.yaml
          sed -i "s|__DB_USER__|$(echo -n "$DB_USER" | base64)|g" kubernetes/secrets.yaml
          sed -i "s|__DB_PASS__|$(echo -n "$DB_PASS" | base64)|g" kubernetes/secrets.yaml
          sed -i "s|__DB_DATABASE__|$(echo -n "$DB_NAME" | base64)|g" kubernetes/secrets.yaml

      - name: Deploy Ghost to EKS
        run: |
          kubectl apply -f kubernetes/secrets.yaml
          kubectl apply -f kubernetes/service.yaml

          echo "Waiting for EKS LoadBalancer..."
          while [ -z "$(kubectl get service ghost-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')" ]; do sleep 10; done
          HOSTNAME=$(kubectl get service ghost-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "EKS Hostname: $HOSTNAME"

          sed -i "s|__APP_URL__|http://$HOSTNAME|g" kubernetes/deployment.yaml
          kubectl apply -f kubernetes/deployment.yaml

      - name: Verify EKS Deployment
        run: |
          kubectl rollout status deployment/ghost-deployment
          echo "Ghost successfully deployed to AWS EKS."

  deploy-to-azure-aks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: aks-resource-group
          cluster-name: my-aks-cluster

      - name: Prepare Kubernetes Secret
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: |
          # This step needs its own checkout to get a clean secrets.yaml file
          # because the AWS job modifies it in place.
          git checkout -- kubernetes/secrets.yaml
          sed -i "s|__DB_HOST__|$(echo -n "$DB_HOST" | base64)|g" kubernetes/secrets.yaml
          sed -i "s|__DB_USER__|$(echo -n "$DB_USER" | base64)|g" kubernetes/secrets.yaml
          sed -i "s|__DB_PASS__|$(echo -n "$DB_PASS" | base64)|g" kubernetes/secrets.yaml
          sed -i "s|__DB_DATABASE__|$(echo -n "$DB_NAME" | base64)|g" kubernetes/secrets.yaml

      - name: Deploy Ghost to AKS
        run: |
          kubectl apply -f kubernetes/secrets.yaml
          kubectl apply -f kubernetes/service.yaml

          echo "Waiting for AKS LoadBalancer..."
          while [ -z "$(kubectl get service ghost-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]; do sleep 10; done
          IP=$(kubectl get service ghost-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "AKS IP: $IP"

          sed -i "s|__APP_URL__|http://$IP|g" kubernetes/deployment.yaml
          kubectl apply -f kubernetes/deployment.yaml

      - name: Verify AKS Deployment
        run: |
          kubectl rollout status deployment/ghost-deployment
          echo "Ghost successfully deployed to Azure AKS."
